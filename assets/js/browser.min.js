var browser = function() {
	"use strict";
	var e = {
		name: null,
		version: null,
		os: null,
		osVersion: null,
		touch: null,
		mobile: null,
		_canUse: null,
		canUse: function(n) {
			e._canUse || (e._canUse = document.createElement("div"));
			var o = e._canUse.style,
				r = n.charAt(0).toUpperCase() + n.slice(1);
			return n in o || "Moz" + r in o || "Webkit" + r in o || "O" + r in o || "ms" + r in o
		},
		init: function() {
			var n, o, r, i, t = navigator.userAgent;
			for (n = "other", o = 0, r = [
					["firefox", /Firefox\/([0-9\.]+)/],
					["bb", /BlackBerry.+Version\/([0-9\.]+)/],
					["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
					["opera", /OPR\/([0-9\.]+)/],
					["opera", /Opera\/([0-9\.]+)/],
					["edge", /Edge\/([0-9\.]+)/],
					["safari", /Version\/([0-9\.]+).+Safari/],
					["chrome", /Chrome\/([0-9\.]+)/],
					["ie", /MSIE ([0-9]+)/],
					["ie", /Trident\/.+rv:([0-9]+)/]
				], i = 0; i < r.length; i++)
				if (t.match(r[i][1])) {
					n = r[i][0], o = parseFloat(RegExp.$1);
					break
				}
			for (e.name = n, e.version = o, n = "other", o = 0, r = [
					["ios", /([0-9_]+) like Mac OS X/, function(e) {
						return e.replace("_", ".").replace("_", "")
					}],
					["ios", /CPU like Mac OS X/, function(e) {
						return 0
					}],
					["wp", /Windows Phone ([0-9\.]+)/, null],
					["android", /Android ([0-9\.]+)/, null],
					["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function(e) {
						return e.replace("_", ".").replace("_", "")
					}],
					["windows", /Windows NT ([0-9\.]+)/, null],
					["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
					["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
					["linux", /Linux/, null],
					["bsd", /BSD/, null],
					["unix", /X11/, null]
				], i = 0; i < r.length; i++)
				if (t.match(r[i][1])) {
					n = r[i][0], o = parseFloat(r[i][2] ? r[i][2](RegExp.$1) : RegExp.$1);
					break
				}
			e.os = n, e.osVersion = o, e.touch = "wp" == e.os ? navigator.msMaxTouchPoints > 0 : !!("ontouchstart" in window), e.mobile = "wp" == e.os || "android" == e.os || "ios" == e.os || "bb" == e.os
		}
	};
	return e.init(), e
}();
! function(e, n) {
	"function" == typeof define && define.amd ? define([], n) : "object" == typeof exports ? module.exports = n() : e.browser = n()
}(this, function() {
	return browser
});

var breakpoints = function() {
	"use strict";

	function e(e) {
		t.init(e)
	}
	var t = {
		list: null,
		media: {},
		events: [],
		init: function(e) {
			t.list = e, window.addEventListener("resize", t.poll), window.addEventListener("orientationchange", t.poll), window.addEventListener("load", t.poll), window.addEventListener("fullscreenchange", t.poll)
		},
		active: function(e) {
			var n, a, s, i, r, d, c;
			if (!(e in t.media)) {
				if (">=" == e.substr(0, 2) ? (a = "gte", n = e.substr(2)) : "<=" == e.substr(0, 2) ? (a = "lte", n = e.substr(2)) : ">" == e.substr(0, 1) ? (a = "gt", n = e.substr(1)) : "<" == e.substr(0, 1) ? (a = "lt", n = e.substr(1)) : "!" == e.substr(0, 1) ? (a = "not", n = e.substr(1)) : (a = "eq", n = e), n && n in t.list)
					if (i = t.list[n], Array.isArray(i)) {
						if (r = parseInt(i[0]), d = parseInt(i[1]), isNaN(r)) {
							if (isNaN(d)) return;
							c = i[1].substr(String(d).length)
						} else c = i[0].substr(String(r).length);
						if (isNaN(r)) switch (a) {
							case "gte":
								s = "screen";
								break;
							case "lte":
								s = "screen and (max-width: " + d + c + ")";
								break;
							case "gt":
								s = "screen and (min-width: " + (d + 1) + c + ")";
								break;
							case "lt":
								s = "screen and (max-width: -1px)";
								break;
							case "not":
								s = "screen and (min-width: " + (d + 1) + c + ")";
								break;
							default:
								s = "screen and (max-width: " + d + c + ")"
						} else if (isNaN(d)) switch (a) {
							case "gte":
								s = "screen and (min-width: " + r + c + ")";
								break;
							case "lte":
								s = "screen";
								break;
							case "gt":
								s = "screen and (max-width: -1px)";
								break;
							case "lt":
								s = "screen and (max-width: " + (r - 1) + c + ")";
								break;
							case "not":
								s = "screen and (max-width: " + (r - 1) + c + ")";
								break;
							default:
								s = "screen and (min-width: " + r + c + ")"
						} else switch (a) {
							case "gte":
								s = "screen and (min-width: " + r + c + ")";
								break;
							case "lte":
								s = "screen and (max-width: " + d + c + ")";
								break;
							case "gt":
								s = "screen and (min-width: " + (d + 1) + c + ")";
								break;
							case "lt":
								s = "screen and (max-width: " + (r - 1) + c + ")";
								break;
							case "not":
								s = "screen and (max-width: " + (r - 1) + c + "), screen and (min-width: " + (d + 1) + c + ")";
								break;
							default:
								s = "screen and (min-width: " + r + c + ") and (max-width: " + d + c + ")"
						}
					} else s = "(" == i.charAt(0) ? "screen and " + i : i;
				t.media[e] = !!s && s
			}
			return t.media[e] !== !1 && window.matchMedia(t.media[e]).matches
		},
		on: function(e, n) {
			t.events.push({
				query: e,
				handler: n,
				state: !1
			}), t.active(e) && n()
		},
		poll: function() {
			var e, n;
			for (e = 0; e < t.events.length; e++) n = t.events[e], t.active(n.query) ? n.state || (n.state = !0, n.handler()) : n.state && (n.state = !1)
		}
	};
	return e._ = t, e.on = function(e, n) {
		t.on(e, n)
	}, e.active = function(e) {
		return t.active(e)
	}, e
}();
! function(e, t) {
	"function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? module.exports = t() : e.breakpoints = t()
}(this, function() {
	return breakpoints
});